
@page "/FacilR"
@using System.Timers
@inject IToastService toast 

<style>
    .container {
        margin-left: 80px;
        width: 400px;
        float: left;
    }

    jonathan {
        float: right;
        width: 50px;
        height: 50px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 40px;
    }

    #miBoton:focus {
        background: #7952B3
    }
</style>

<AuthorizeView>
    <Authorized>
        @if (@context.User.Identity.Name != string.Empty)
        {
            RecibirNombreUsuario(Convert.ToString(context.User.Identity.Name));
        }
    </Authorized>
</AuthorizeView>


<div class="container">
    <div class="row">
        @for (var NumeroAnimales = 0; NumeroAnimales < AnimalesMesclado.Count; NumeroAnimales++)
        {
            var animal = AnimalesMesclado[NumeroAnimales];
            var uniqueDescription = $"Button #{NumeroAnimales}";
            <div class="col-3">
                <button id=miBoton @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
</div>

<div class="jonathan mt-5">

    <div class="container bg-transparent" style="height:330px">
        <div class="border border-dark">
            <div class="text-center">
                <h3 class="text-light">CUDRO DE PUNTAGE</h3>
            </div>
        </div>

        <div class="border border-dark">
            <h3 class="text-light">Pares: @ParesEncontrados</h3>
            <h4 class="text-light">Tiempo: @TiempoPantalla</h4>
        </div>

    </div>
</div>

@code {

    List<string> animalEmoji = new List<string>()
{
    "🐶","🐶",
    "🐺","🐺",
    "🐮","🐮",
    "🦊","🦊",
    "🐱","🐱",
    "🦁","🦁",
    "🐯","🐯",
    "🐹","🐹",
    };

    List<string> AnimalesMesclado = new List<string>();
    int ParesEncontrados = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 80;
    string TiempoPantalla;
    string UltimoAnimalEncontrado = string.Empty;
    string UltimaDescripcion = string.Empty;

    MatchDino jugada = new MatchDino();
    public string Jugador = string.Empty;
    string time;


    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        AnimalesMesclado = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        ParesEncontrados = 0;
        tenthsOfSecondsElapsed = 80;
    }

    private void Reiniciar()
    {
        Random random = new Random();
        AnimalesMesclado = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        ParesEncontrados = 0;
        tenthsOfSecondsElapsed = 80;
    }

    private void ButtonClick(string animal, string animalDescription)
    {
        if (UltimoAnimalEncontrado == string.Empty)
        {
            // First selection of the pair. Remember it.
            UltimoAnimalEncontrado = animal;
            UltimaDescripcion = animalDescription;
            if (ParesEncontrados == 8)
            {
                ParesEncontrados = 0;
            }

            timer.Start();

        }
        else if ((UltimoAnimalEncontrado == animal) && (animalDescription != UltimaDescripcion))
        {
            // Match found! Reset for next pair.
            UltimoAnimalEncontrado = string.Empty;

            // Replace found animals with empty string to hide them.
            AnimalesMesclado = AnimalesMesclado
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            ParesEncontrados++;
            if (ParesEncontrados == 8)
            {
                timer.Stop();
                time = (8 - Convert.ToDouble(this.TiempoPantalla.Replace("s", ""))).ToString();
                TiempoPantalla = time;
                TiempoPantalla += "s";
                TiempoPantalla += " ¿Nueva Partida?";
                RegistrarJugada();

                Reiniciar();
            }
        }
        else
        {
            // User selected a pair that don't match.
            // Reset selection.
            UltimoAnimalEncontrado = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed--;
            if (tenthsOfSecondsElapsed <= 0)
            {
                timer.Stop();
                TiempoPantalla += " ¿Nueva Partida?";

                Reiniciar();
            }
            TiempoPantalla = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }

    private void RecibirNombreUsuario(string user)
    {
        Jugador = user;
    }

    private void RegistrarJugada()
    {
        bool paso = false;

        jugada.Id = 0;
        jugada.Jugador = Jugador;
        jugada.ModoDeJuego = "Contra Reloj";
        jugada.Dificultad = "Fácil";
        jugada.TiempoJugada = Math.Round(Convert.ToSingle(this.time), 2);

        paso = MatchDinoBLL.Guardar(jugada);

        if (!paso)
        {
            toast.ShowSuccess("Ha ocurrido un error al guardar los datos.");
        }
    }
}