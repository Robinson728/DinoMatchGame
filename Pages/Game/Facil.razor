@page "/Facil"
@using System.Timers
@using DinoMatchGame.BLL
@inject IToastService toast

<style>
    .container {
        margin-left: 80px;
        width: 400px;
        float: left;
    }

    jonathan {
        float: right;
        width: 50px;
        height: 50px;
    }

    #miboton {
        width: 100px;
        height: 100px;
        font-size: 40px;
    }

        #miboton:focus {
            background: #7952B3
        }
</style>

@*Con este codigo capturamos el nombre del usuario.*@

<AuthorizeView>
    <Authorized>
        @if (@context.User.Identity.Name != string.Empty)
        {
            RecibirNombreUsuario(Convert.ToString(context.User.Identity.Name));
        }
    </Authorized>
</AuthorizeView>

@if (prueba)
{
    Reiniciar();
    <style>
        #Cuadro {
            display: none
        }
    </style>

}



<div id="Cuadro" class="container mt-3">

    <div class="row">

        @for (var NumeroAnimales = 0; NumeroAnimales < AnimalesMesclado.Count; NumeroAnimales++)
        {
            var animal = AnimalesMesclado[NumeroAnimales];
            var uniqueDescription = $"Button #{NumeroAnimales}";
            <div class="col-3">
                <button id="miboton" @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
</div>


<div class="container">
    <div class="card text-white bg-transparent" style="max-width: 18rem; background: #7952B3">
        <div class="card-header text-center" style="background: #511E78 ; font-size: 22px">Cuadro de Puntuación</div>
        <div class="card-body" style="background: #8B2F97 ">
            <h5 class="card-title">Pares encontrados: @ParesEncontrados</h5>
            <h5 class="card-title">Tiempo: @TiempoPantalla</h5>
        </div>
        <div class="card-footer text-center" style="background: #511E78">
            <button class="btn btn-outline-success" @onclick="()=> prueba = !prueba">Jugar</button>
        </div>
    </div>
</div>


@*<div class="jonathan mt-5">

        <div class="container bg-transparent" style="height:330px">
            <div class="border border-dark">
                <div class="text-center">
                    <h3 class="text-light">Cuadro de puntaje</h3>
                </div>
            </div>

            <div class="border border-dark">
                <h3 class="text-light">Pares: @ParesEncontrados</h3>
                <h4 class="text-light">Tiempo: @TiempoPantalla</h4>
            </div>

        </div>
    </div>*@

@code {

    List<string> animalEmoji = new List<string>()
{
    "🐶","🐶",
    "🐺","🐺",
    "🐮","🐮",
    "🦊","🦊",
    "🐱","🐱",
    "🦁","🦁",
    "🐯","🐯",
    "🐹","🐹",
    };

    List<string> AnimalesMesclado = new List<string>();
    int ParesEncontrados = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string TiempoPantalla = "0.0s";
    string UltimoAnimalEncontrado = string.Empty;
    string UltimaDescripcion = string.Empty;

    MatchDino jugada = new MatchDino();
    public string Jugador = string.Empty;
    string time;

    bool prueba = true;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    private void SetUpGame()
    {
        Random random = new Random();
        AnimalesMesclado = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        ParesEncontrados = 0;
        tenthsOfSecondsElapsed = 0;
    }

    private void Reiniciar()
    {
        Random random = new Random();
        AnimalesMesclado = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        tenthsOfSecondsElapsed = 0;
    }

    private void ButtonClick(string animal, string animalDescription)
    {

        if (UltimoAnimalEncontrado == string.Empty)
        {
            // First selection of the pair. Remember it.
            UltimoAnimalEncontrado = animal;
            UltimaDescripcion = animalDescription;
            if (ParesEncontrados == 8)
            {
                ParesEncontrados = 0;
            }

            timer.Start();

        }
        else if ((UltimoAnimalEncontrado == animal) && (animalDescription != UltimaDescripcion))
        {
            // Match found! Reset for next pair.
            UltimoAnimalEncontrado = string.Empty;

            // Replace found animals with empty string to hide them.
            AnimalesMesclado = AnimalesMesclado
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            ParesEncontrados++;
            if (ParesEncontrados == 8)
            {
                timer.Stop();
                time = TiempoPantalla;
                TiempoPantalla += " ¿Nueva Partida?";

                prueba = !prueba;

                RegistrarJugada();


                Reiniciar();
            }
        }
        else
        {
            // User selected a pair that don't match.
            // Reset selection.
            UltimoAnimalEncontrado = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            TiempoPantalla = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
            timer.Start();
        });
    }

    private void RecibirNombreUsuario(string user)
    {
        Jugador = user;
    }

    private void RegistrarJugada()
    {
        bool paso = false;

        jugada.Id = 0;
        jugada.Jugador = Jugador;
        jugada.ModoDeJuego = "Arcade";
        jugada.Dificultad = "Fácil";
        jugada.TiempoJugada = Math.Round(Convert.ToSingle(this.time.Replace("s", "")), 2);

        paso = MatchDinoBLL.Guardar(jugada);

        if (!paso)
        {
            toast.ShowSuccess("Ha ocurrido un error al guardar los datos.");
        }
    }
}

@*<div class="container" style="float:left">
    <div class="row" id="tablero">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-1">
                <button id="miboton" @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
</div>

<div style="float:right">
    <div class="card text-white bg-transparent" style="max-width: 18rem; background: #7952B3">
        <div class="card-header text-center" style="background: #511E78 ; font-size: 22px">Cuadro de Puntuación</div>
        <div class="card-body" style="background: #8B2F97 ">
            <h5 class="card-title">Pares encontrados: @ParesEncontrados</h5>
            <h5 class="card-title">Tiempo: @TiempoPantalla</h5>
        </div>
        <div class="card-footer text-center" style="background: #511E78">
            <button class="btn btn-outline-success" @onclick="()=> prueba = !prueba">Jugar</button>
        </div>
    </div>
</div>*@